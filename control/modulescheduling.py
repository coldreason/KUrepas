from decoder import *
from encoder import *
import random
import threading

taskSet = [[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
           [[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
           [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0]],
           [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
           [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]]

init = 0
taskID = 0
def taskQueue2requestQueue() :
    
    global init
    global taskSet
    if init == 0 :
        print('initializing taskSet')
        for i in range(0, 5) :
            encoder_taskSet(taskSet[i])
            init = 1
    else:
        taskQueueData = decoder_taskQueue() # [pos_x, pos_y]
        if(taskQueueData != None) :
            for i in range(0, 5) :
                if taskSet[i][taskQueueData['pos_s_x']][taskQueueData['pos_s_y']] == 1:
                    encoder_requestQueue({'unitID' : i, 'taskID' : taskQueueData['taskID']})
            print('new taskQueue exists')
    threading.Timer(0.1, taskQueue2requestQueue).start()


def scoreQueue2designateQueue():
    newScoreQueue = []
    global taskID
    tf = 0
    while True :
        newscoreData = decoder_scoreQueue() # which is equal to taskID then remove data line
        if(newscoreData == None) :
            if(tf == 0):
                newDesignateQueue = []
                break
            break
        newScoreQueue.append(newscoreData)
        tf = 1
    if(len(newScoreQueue) != 0) :
        i = designateOperation(newScoreQueue)
        encoder_designateQueue({'unitID' : i, 'taskID' : taskID})
        taskID = taskID + 1
    threading.Timer(2, scoreQueue2designateQueue).start()

def designateOperation(newScoreQueue):
    print(newScoreQueue)
    i = random.randint(0, 4)
    return  i

def reAllocating():
    global taskSet
    newDesignateQueue = []
    tf = 0
    while True :
        newDesignateData = decoder_designateQueue()
        if(newDesignateData == None) :
            if(tf == 0):
                newDesignateQueue = []
                break
            break
        newDesignateQueue.append(newDesignateData)
        tf = 1
    if(len(newDesignateQueue) != 0) :
        pos_x, pos_y, new_set = allocateOperation(newDesignateQueue)
        print('reAllocating')
        for i in range(0, 5) :
            taskSet[i][pos_x][pos_y] = new_set[i]
            encoder_taskSet(taskSet[i])
    threading.Timer(10, reAllocating).start()

def allocateOperation(newDesignateQueue): # this is a module that will be changed to AI model
    print(newDesignateQueue)
    pos_x = random.randint(0,19)
    pos_y = random.randint(0,19)
    while True:
        new_set = [random.randint(0,1),random.randint(0,1),random.randint(0,1),random.randint(0,1),random.randint(0,1)]
        if 1 not in new_set:
            continue
        else:
            break
    return pos_x, pos_y, new_set