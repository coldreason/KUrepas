from decoder import *
from encoder import *
import random
import threading

taskSet = [[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
           [[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
           [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0]],
           [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
           [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]]

init = 0
taskID = 1
def taskQueue2requestQueue() :
    print(1)
    global init
    global taskSetz
    if init == 0 :
        print('initializing taskSet')
        for i in range(0, 5) :
            encoder_taskSet(i, taskSet[i])
            init = 1
    else:
        taskQueueData = decoder_taskQueue() # [pos_x, pos_y]
        if(taskQueueData != None) :
            x = int(taskQueueData['pos_s_x'])
            y = int(taskQueueData['pos_s_y'])
            for i in range(0, 5) :
                if taskSet[i][x][y] == 1:
                    encoder_requestQueue({'unit_id' : i, 'task_id' : taskQueueData['task_id']})
    threading.Timer(0.4, taskQueue2requestQueue).start()


def scoreQueue2designateQueue():
    print(2)
    newscoreDataList = []
    global taskID
    for unitID in range(0,5):
        print('taskID: ' + str(taskID) + 'unitID' + str(unitID))
        newscoreData = decoder_scoreQueue(taskID, unitID)
        print(newscoreData)
        if(newscoreData != None) :
            newscoreDataList.append(newscoreData)
    if(len(newscoreDataList) != 0) :
        i = designateOperation(newscoreDataList)
        encoder_designateQueue({'unit_id' : i, 'task_id' : taskID})
        taskID = taskID + 1
    threading.Timer(3, scoreQueue2designateQueue).start()

def designateOperation(newScoreQueue):
    print(newScoreQueue)
    i = random.randint(1, 5)
    return  i

def reAllocating():
    global taskSet
    # newDesignateQueue = []
    # tf = 0
    # while True :
    #     newDesignateData = decoder_designateQueue()
    #     if(newDesignateData == None) :
    #         if(tf == 0):
    #             newDesignateQueue = []
    #             break
    #         break
    #     newDesignateQueue.append(newDesignateData)
    #     tf = 1
    # if(len(newDesignateQueue) != 0) :
    pos_x, pos_y, new_set = allocateOperation()
    print('reAllocating')
    for i in range(0, 5) :
        taskSet[i][pos_x][pos_y] = new_set[i]
        encoder_taskSet(i+1,taskSet[i])
    threading.Timer(3, reAllocating).start()

def allocateOperation(): # this is a module that will be changed to AI model
    pos_x = random.randint(0,19)
    pos_y = random.randint(0,19)
    while True:
        new_set = [random.randint(0,1),random.randint(0,1),random.randint(0,1),random.randint(0,1),random.randint(0,1)]
        if 1 not in new_set:
            continue
        else:
            break
    return pos_x, pos_y, new_set